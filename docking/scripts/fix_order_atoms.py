"""
    This script fixes the order of atoms in the Rosetta PARAMS file
    to match that of the corresponding PDB file.
    The resulting PARAMS files must be edited to fix the ligand names
    to something that Rosetta cannot match with its database,
    otherwise it will be producing errors saying that there is
    a mistatch with names of atoms, etc.
    The PDB files of ligand generated by Rosetta:mol_to_params.py
    must be inserted into the PDB file that will be used in docking.
"""

import  os
import  sys
from pdb_manipulations.merge import getListLines


def  main( inputPARAMFile,
        inputPDBFile,
        outputPARAMFile
        ):
    listLinesPARAM  =  getListLines( inputPARAMFile )
    listLinesPDB    =  getListLines( inputPDBFile )
    listAtomsLinesPDB  =  []
    listAtomsLinesPARAMS  =  []
    for line in listLinesPDB:
        if "HETATM" == line[ 0: 6 ]:
            listAtomsLinesPDB.append( line )
    for line in listLinesPARAM:
        if "ATOM " == line[ 0:5 ]:
            listAtomsLinesPARAMS.append( line )
    if len( listAtomsLinesPDB ) != len( listAtomsLinesPARAMS ):
        print( "numbers of atoms do not coincide!" )
        print( len( listAtomsLinesPDB ) )
        print( len( listAtomsLinesPARAMS ) )
        return
    listReordered  =  []
    for i in range( 0, len( listAtomsLinesPDB ) ):
        linePDB  =  listAtomsLinesPDB[ i ]
        atomName  =  linePDB[ 12: 16 ].strip()
        for j in range( 0, len( listAtomsLinesPARAMS ) ):
            linePARAMS  =  listAtomsLinesPARAMS[ j ]
            atomNamePARAMS  =  linePARAMS[ 5:10 ].strip()
            if atomName == atomNamePARAMS:
                listReordered.append( linePARAMS )
    with open( outputPARAMFile, "a" ) as out:
        for i in range( 0, 4 ):
            lineToSave  =  listLinesPARAM[ i ] + "\n"
            out.write( lineToSave )
        for i in range( 0, len( listReordered ) ):
            lineToSave  =  listReordered[ i ] + "\n"
            out.write( lineToSave )
        start  =  False
        for j in range( 0, len( listLinesPARAM ) ):
            line  =  listLinesPARAM[ j ]
            if True == ( "BOND_TYPE" in line ):
                start  =  True
            if True == start:
                lineToSave  =  line + "\n"
                out.write( lineToSave )

if "__main__" == __name__:
    if 4 != len( sys.argv ):
        print( "please provide:\n(i). input PARAMS-file;\n(ii). input PDB file;\n(iii). output PARAMS-file;\n" )
        exit()
    inputPARAMSFile  =  sys.argv[ 1 ]
    inputPDBFile     =  sys.argv[ 2 ]
    outputPARAMSFile =  sys.argv[ 3 ]
    if True == os.path.exists( outputPARAMSFile ):
        os.remove( outputPARAMSFile )
    main( inputPARAMSFile, inputPDBFile, outputPARAMSFile )

