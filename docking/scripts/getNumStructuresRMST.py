"""
   reads-in a PDB file that contains a list of models
   generated by QM-ENSEMBLE
   and calculates RMSD between all pairs of models
   and saves the models that fall beyond the specified
   RMS-Threshold
"""

import os
import sys
import math
 

def getListLines(file1):
  listLines = [line.strip("\t\n") for line in open(file1, "r")]
  return listLines


if  __name__ == "__main__":
  usage="""
  isoRMSD.py will output two RMSD, one is fitted, another is no fit.
  Not fit RMSD mean no change in molecules coordinates. 
  
  Usage:python isoRMSD.py mol1.pdb mol2.pdb rmsd.txt
  """
  if 3 != len(sys.argv):
    sys.exit()

  filename = sys.argv[1]
  rmsThreshold = float(sys.argv[2])

  listLines = getListLines(filename)
  listListLines = []
  listLinesModel = []
  for line in listLines:
    if "MODEL" == line[0:5]:
      if 0 != len(listLinesModel):
        listListLines.append(listLinesModel)
      listLinesModel = []
    if "HETATM" == line[0:6]\
    and "H" != line[13]:
      listLinesModel.append(line)

  listListLinesOutput = [listListLines[0]]

  for i in range(0, len(listListLines)):
    conformerI = listListLines[i]
    beyondThreshold = True
    for j in range(0, len(listListLinesOutput)):
      conformerJ = listListLinesOutput[j]
      if len(conformerI) != len(conformerJ):
        print("ERROR: different lengths of conformers!")
        sys.exit()
      d2 = 0
      for k in range(0, len(conformerI)):
        lineI = conformerI[k]
        lineJ = conformerJ[k]
        xI = float(lineI[30:38].strip())
        xJ = float(lineJ[30:38].strip())
        yI = float(lineI[38:46].strip())
        yJ = float(lineJ[38:46].strip())
        zI = float(lineI[46:54].strip())
        zJ = float(lineJ[46:54].strip())
        d2 = d2 + ((xI - xJ)**2 + (yI - yJ)**2 + (zI - zJ)**2)
      rmsd = math.sqrt( d2 / len(conformerI) )
      if rmsd < rmsThreshold:
        beyondThreshold = False
        break
    if True == beyondThreshold:
      listListLinesOutput.append(conformerI)

  for i in range(0, len(listListLinesOutput)):
    conformer = listListLinesOutput[i]
    fileOut = "conformer_qmens_" + str(rmsThreshold) + "_" + str(i) + ".pdb"
    with open(fileOut, "a") as out:
      for line in conformer:
        out.write(line + "\n")

